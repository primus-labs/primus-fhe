use std::sync::Mutex;

/// A pool for managing a collection of reusable objects.
pub struct Pool<T>(Mutex<Vec<T>>);

impl<T> Default for Pool<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}

impl<T> Pool<T> {
    /// Creates a new, empty `Pool`.
    ///
    /// # Returns
    ///
    /// A new instance of `Pool`.
    #[inline]
    pub fn new() -> Self {
        Self(Mutex::new(Vec::new()))
    }

    /// Creates a new `Pool` with a specified capacity.
    ///
    /// This function initializes the pool with a vector that has the specified capacity.
    ///
    /// # Arguments
    ///
    /// * `capacity` - The initial capacity of the pool.
    ///
    /// # Returns
    ///
    /// A new instance of `Pool` with the specified capacity.
    #[inline]
    pub fn with_capacity(capacity: usize) -> Self {
        Self(Mutex::new(Vec::with_capacity(capacity)))
    }

    /// Creates a new `Pool` with a specified number of elements, each generated by the provided function.
    ///
    /// This function initializes the pool with a vector containing the specified number of elements.
    /// Each element is created by calling the provided function.
    ///
    /// # Arguments
    ///
    /// * `length` - The number of elements to initialize in the pool.
    /// * `f` - A function that generates an element of type `T`.
    ///
    /// # Returns
    ///
    /// A new instance of `Pool` with the specified number of elements.
    #[inline]
    pub fn new_with<F>(length: usize, f: F) -> Self
    where
        F: Fn() -> T,
    {
        let data = (0..length).map(|_| f()).collect::<Vec<_>>();
        Self(Mutex::new(data))
    }

    /// Gets an object from the pool, if available.
    ///
    /// # Returns
    ///
    /// An `Option` containing an object from the pool, or `None` if the pool is empty.
    #[inline]
    pub fn try_get(&self) -> Option<T> {
        self.0.lock().ok().and_then(|mut data| data.pop())
    }

    /// Gets an object from the pool, or creates a new one using the provided function.
    ///
    /// If an object is available in the pool, it is returned. Otherwise, the provided
    /// function is called to create a new object, which is then returned.
    ///
    /// # Arguments
    ///
    /// * `f` - A function that creates a new object if the pool is empty.
    ///
    /// # Returns
    ///
    /// An object from the pool, or a new object created by the function `f`.
    #[inline]
    pub fn get<F>(&self, f: F) -> T
    where
        F: FnOnce() -> T,
    {
        self.try_get().unwrap_or_else(f)
    }

    /// Stores an object in the pool.
    ///
    /// # Arguments
    ///
    /// * `value` - The object to be stored in the pool.
    #[inline]
    pub fn store(&self, value: T) {
        let _ = self.0.lock().map(|mut data| data.push(value));
    }

    /// Clears all objects from the pool.
    #[inline]
    pub fn clear(&self) {
        let _ = self.0.lock().map(|mut data| data.clear());
    }
}
