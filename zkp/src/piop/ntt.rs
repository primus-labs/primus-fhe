//! PIOP for NTT (The algorithm is derived from Chap3.1 in zkCNN: https://eprint.iacr.org/2021/673)
//! The prover wants to convince that Number Theoretic Transform (NTT) algorithm.
//! NTT is widely used for the multiplication of two polynomials in field.
//! 
//! The goal of this IOP is to prove:
//!
//! Given M instances of addition in Zq, the main idea of this IOP is to prove:
//! For y \in \{0, 1\}^N:
//!     $$a(y) = \sum_{x\in \{0, 1\}^{\log N} c(x)\cdot F(y, x) }$$
//! where c represents the coefficients of a degree-{N-1} polynomial and a represents the evaulations at (ω^1, ω^3, ..., ω^{2N-1}),
//! 
//! Here ω is the primitive 2N-th root of unity such that ω^{2N} = 1.
//! F is the standard Fourier matrix with only 2N distinct values and F(y, x) = ω^{(2Y-1)X} where Y and X are the field representations for the binary representations y and x, respectively. 
//! 
//! The LHS and RHS of the above equation are both MLE for y, so it can be reduced to check at a random point due to Schwartz-Zippel Lemma.
//! The remaining thing is to prove $$a(u) = \sum_{x\in \{0, 1\}^{\log N} c(x)\cdot F(u, x) }$$ with the sumcheck protocol
//! where u is the random challenge from the verifier.

use std::{marker::PhantomData};
use std::rc::Rc;
use crate::piop::ntt;
use crate::sumcheck::prover::ProverMsg;
use crate::sumcheck::MLSumcheck;

use algebra::{
    DenseMultilinearExtension, Field, ListOfProductsOfPolynomials, MultilinearExtension, NTTField, PolynomialInfo
};

/// SNARKs for NTT, i.e. $$a(u) = \sum_{x\in \{0, 1\}^{\log N} c(x)\cdot F(u, x) }$$
pub struct NTT_IOP<F: Field>(#[doc(hidden)] PhantomData<F>);

/// proof generated by prover
pub struct NTTProof<F: Field> {
    /// sumcheck proof for $$a(u) = \sum_{x\in \{0, 1\}^{\log N} c(x)\cdot F(u, x) }$$
    pub sumcheck_msg: Vec<ProverMsg<F>>,
}

/// subclaim returned to verifier
pub struct NTTSubclaim<F: Field> {
    /// subcliam for \sum_{x} c(x)\cdot F(u, x) = 0
    pub sumcheck_point: Vec<F>,
    /// expected value returned in the last round of the sumcheck
    pub sumcheck_expected_evaluations: F,
}

/// Stores the NTT instance with the corresponding NTT table
pub struct NTTInstance<F: Field> {
    /// size of the polynomial, i.e. the degree of the polynomial is N - 1
    pub N: u32,
    /// stores {ω^0, ω^1, ..., ω^{2N-1}}
    pub ntt_table: Vec<F>,
    /// coefficient representation of the polynomial
    pub coeffs: Rc<DenseMultilinearExtension<F>>,
    /// point-evaluation representation of the polynomial
    pub points: Rc<DenseMultilinearExtension<F>>,
}

/// Stores the corresponding NTT table for the verifier
pub struct NTTInstanceInfo<F: Field> {
    /// size of the polynomial, i.e. the degree of the polynomial is N - 1
    pub N: u32,
    /// stores {ω^0, ω^1, ..., ω^{2N-1}}
    pub ntt_table: Vec<F>,
}

/// Naive implementation for initializing F(u, x) in NTT (derived from zkCNN: https://eprint.iacr.org/2021/673)
/// 
/// In NTT, the Fourier matrix is different since we choose these points: ω^1, ω^3, ..., ω^{2N-1}
/// Compared to the original induction, the main differences here are F(y, x)  = ω^{(2Y-1) * X} and Y = \sum_{i = 0} y_i * 2^i.
/// The latter one indicates that we use little-endian.
/// * As a result, the equation (8) in zkCNN is = ω^X * \prod_{i=0}^{\log{N-1}} ((1 - u_i) + u_i * ω^{2^{i + 1} * X})
pub fn naive_init_fourier_table<F: Field>(u: &[F], w: F) -> DenseMultilinearExtension<F> {
    let dim = u.len();
    let M = 1 << (dim + 1); // M = 2N = 2 * (1 << dim)

    let mut evaluations: Vec<_> = (0..(1 << dim)).map(|_| F::ONE).collect();

    let mut power_of_roots = Vec::with_capacity(M as usize);
    
    let mut power = F::ONE;
    for _ in 0..M {
        power_of_roots.push(power);
        power *= w;
    }

    for x in 0..(1 << dim) {
        for i in 0..dim {
            let idx = (1 << (i + 1)) * x % M;

            let x_i = (x >> i) & 1;
            let x_i_idx = (1 << i) * x_i;
            // evaluations[x] *= (F::ONE - u[i]) + u[i] * power_of_roots[idx];
            evaluations[x] *= ( (F::ONE - u[i]) + u[i] * power_of_roots[idx] ) * power_of_roots[x_i_idx];
        }
        // evaluations[x] *= power_of_roots[x];
    }

    DenseMultilinearExtension::from_evaluations_vec(dim, evaluations)
}

/// Generate MLE for the Fourier function F(u, x) for x \in \{0, 1\}^dim where u is the random point.
/// Dynamic programming implementaion for initializing F(u, x) in NTT (derived from zkCNN: https://eprint.iacr.org/2021/673)
/// `N` is the dimension of the vector used to represent the polynomial in NTT.
/// 
/// In NTT, the Fourier matrix is different since we choose these points: ω^1, ω^3, ..., ω^{2N-1}
/// Compared to the original induction, the main differences here are F(y, x)  = ω^{(2Y-1) * X} and Y = \sum_{i = 0} y_i * 2^i.
/// The latter one indicates that we use little-endian.
/// * As a result, the equation (8) in zkCNN is = ω^X * \prod_{i=0}^{\log{N-1}} ((1 - u_i) + u_i * ω^{2^{i + 1} * X})
/// * (This function is the dynamic programming version of the above function.)
/// 
/// * u: the random point
/// * ω: the 2N-th root of unity 
pub fn init_fourier_table<F: Field>(u: &[F], w: F) -> DenseMultilinearExtension<F> {
    let dim = u.len(); // N = 1 << dim
    let M = 1 << (dim + 1); // M = 2N = 2 * (1 << dim)

    // It stores the NTT table: ω^0, ω^1, ..., ω^{2N - 1}
    let mut power_of_roots = Vec::with_capacity(M as usize);
    
    let mut power = F::ONE;
    for _ in 0..M {
        power_of_roots.push(power);
        power *= w;
    }

    // It store the evaluations of all F(u, x) for x \in \{0, 1\}^dim.
    // Note that in our implementation, we use little endian form, so the index `0b1011`
    // represents the point `P(1,1,0,1)` in {0,1}^`dim`
    let mut evaluations: Vec<_> = (0..(1 << dim)).map(|_| F::ZERO).collect();
    evaluations[0] = F::ONE;

    // * Compute \prod_{i=0}^{\log{N-1}} ((1 - u_i) + u_i * ω^{2^{i + 1} * X})
    // The reason why we update the table with u_i in reverse order is that
    // in round i, ω^{2^{i + 1} is the (M / (2^{i+1}))-th root of unity, e.g. i = dim - 1, ω^{2^{i + 1} is the 2-th root of unity.
    // Hence, we need to align this with the update method in dynamic programming.
    for i in (0..dim).rev() {
        let this_round_dim = dim - i;
        let last_round_dim = this_round_dim - 1;
        let this_round_table_size = 1 << this_round_dim;
        let last_round_table_size = 1 << (this_round_dim - 1);
        for x in (0..this_round_table_size).rev() {
            // idx is to indicate the power ω^{2^{i + 1} * X}
            let idx = (1 << (i + 1)) * x % M;
            // let x_i = (x >> (this_round_dim - 1)) & 1;
            if x >= last_round_table_size {
                evaluations[x] = power_of_roots[1 << last_round_dim] * evaluations[x % last_round_table_size] * (F::ONE - u[i] + u[i] * power_of_roots[idx]);
            }
            else {
                evaluations[x] = evaluations[x % last_round_table_size] * (F::ONE - u[i] + u[i] * power_of_roots[idx]);
            }
            // evaluations[x] = evaluations[x % last_round_table_size] * (F::ONE - u[i] + u[i] * power_of_roots[idx]);
        }
    }

    // * Compute ω^X * \prod_{i=0}^{\log{N-1}} ((1 - u_i) + u_i * ω^{2^{i + 1} * X})
    // for i in 0..(1 << dim) {
    //     evaluations[i] *= power_of_roots[i % M];
    // }
    DenseMultilinearExtension::from_evaluations_vec(dim, evaluations)
}

/// Compute the mle of w^{2^exp \cdot x} for x \in \{0, 1\}^x_dim in a naive method
/// * ntt_table: NTT table for w (M-th root of unity) containing {1, w, w^1, ..., w^{M-1}}
/// * logM: log of M
/// * x_dim: dimension of x or the num of variables of the outputted mle
/// * exp: the exponent of the function defined above
pub fn naive_w_power_times_x_table<F: Field>(ntt_table: &[F], logM: usize, x_dim: usize, exp: usize) -> DenseMultilinearExtension<F> {
    let M = 1 << logM; // M = 2N = 2 * (1 << dim)
    assert_eq!(ntt_table.len(), M);

    let mut evaluations: Vec<_> = (0..(1 << x_dim)).map(|_| F::ONE).collect();
    for x in 0..(1 << x_dim) {
        evaluations[x] = ntt_table[(1 << exp) * x % M];
    }
    DenseMultilinearExtension::from_evaluations_vec(x_dim, evaluations)
}

/// Evaluate the mle w^{2^exp * x} for a random point r \in F^{x_dim}
/// This algorithm is also derived from the techniques in zkCNN.
/// w^{2^exp * r} = \sum_x eq(x, r) *  w^{2^exp * x}
///               = \prod_i (1 - r_i + r_i * w^{2^ {(exp + i) % logM})
/// * Note that the above equation only holds for exp <= logM - x_dim; 
/// * otherwise, the exponent 2^exp * x involves a modular addition, disabling the decomposition.
/// (Although I am not clearly making it out, the experiement result shows the above argument.)
/// 
/// * ntt_table: NTT table for w (M-th root of unity) containing {1, w, w^1, ..., w^{M-1}}
/// * logM: log of M
/// * x_dim: dimension of x or the num of variables of the outputted mle
/// * exp: the exponent of the function defined above
/// * r: random point in F^{x_dim}
pub fn eval_w_power_times_x<F: Field>(ntt_table: &[F], logM: usize, x_dim: usize, exp: usize, r: &[F]) -> F {
    assert_eq!(ntt_table.len(), 1 << logM);
    assert_eq!(x_dim, r.len());
    assert!(exp + x_dim <= logM);
    let mut prod = F::ONE;

    for i in 0..x_dim {
        let log_exp = (exp + i) % logM;
        prod *= F::ONE - r[i] + r[i] * ntt_table[1 << log_exp];
    }

    prod
}

impl<F: Field> NTTInstance<F> {
    /// Extract the information of the NTT Instance for verification
    #[inline]
    pub fn info(&self) -> NTTInstanceInfo<F> {
        NTTInstanceInfo {
            N: self.N,
            ntt_table: self.ntt_table.clone(),
        }
    }

    /// Constuct a new instance from vector
    #[inline]
    pub fn from_vec(
        N: u32,
        ntt_table: Vec<F>,
        coeffs: &Rc<DenseMultilinearExtension<F>>,
        points: &Rc<DenseMultilinearExtension<F>>,
    ) -> Self {
        Self{
            N,
            ntt_table,
            coeffs: Rc::clone(&coeffs),
            points: Rc::clone(&points),
        }
    }

    /// Constuct a new instance from slice
    #[inline]
    pub fn from_slice(
        N: u32,
        ntt_table: &Vec<F>,
        coeffs: &Rc<DenseMultilinearExtension<F>>,
        points: &Rc<DenseMultilinearExtension<F>>,
    ) -> Self {
        Self{
            N,
            ntt_table: ntt_table.clone(),
            coeffs: Rc::clone(&coeffs),
            points: Rc::clone(&points),
        }
    }
}

impl<F: Field> NTTSubclaim<F> {
    
}

#[cfg(test)]
mod test {
    use rand::thread_rng;
    use rand_distr::Distribution;
    use algebra::{
        derive::{Field, Prime, NTT}, DenseMultilinearExtension, Field, FieldUniformSampler, MultilinearExtension, NTTField
    };
    use crate::piop::ntt::{naive_w_power_times_x_table, eval_w_power_times_x};

    use super::{naive_init_fourier_table, init_fourier_table};

    macro_rules! field_vec {
        ($t:ty; $elem:expr; $n:expr)=>{
            vec![<$t>::new($elem);$n]
        };
        ($t:ty; $($x:expr),+ $(,)?) => {
            vec![$(<$t>::new($x)),+]
        }
    }

    #[derive(Field, Prime, NTT)]
    #[modulus = 132120577]
    pub struct Fp32(u32);
    // field type
    type FF = Fp32;

    #[test]
    fn test_naive_init_fourier_matrix() {
        let dim = 2;
        let M = 1 << (dim + 1); // M = 2N = 2 * (1 << dim)
        let u = field_vec!(FF; 1, 1);
        let v = field_vec!(FF; 0, 1);
        
        let mut u_v = Vec::with_capacity(dim<<1);
        u_v.extend(&u);
        u_v.extend(&v);

        // root is the M-th root of unity
        let root = FF::try_minimal_primitive_root(M).unwrap();

        let mut fourier_matrix: Vec<_> = (0..(1 << dim) * (1 << dim)).map(|_| FF::ZERO).collect();
        let mut power_of_roots = Vec::with_capacity(M as usize);
    
        let mut power = FF::ONE;
        for _ in 0..M {
            power_of_roots.push(power);
            power *= root;
        }

        // In little endian, the index for F[i, j] is i + (j << dim)
        for i in 0..1<<dim {
            for j in 0..1<<dim {
                let idx_power = (2 * i + 1) * j % M;
                let idx_fourier = i + (j << dim);
                fourier_matrix[idx_fourier as usize] = power_of_roots[idx_power as usize];
            }
        }

        let fourier_mle = DenseMultilinearExtension::from_evaluations_vec(dim << 1, fourier_matrix);
        let partial_fourier_mle = naive_init_fourier_table(&u, root);

        assert_eq!(fourier_mle.evaluate(&u_v), partial_fourier_mle.evaluate(&v));
    }

    #[test]
    fn test_init_fourier_matrix() {
        let sampler = <FieldUniformSampler<FF>>::new();
        let mut rng = thread_rng();

        let dim = 10;
        let M = 1 << (dim + 1); // M = 2N = 2 * (1 << dim)
        let u: Vec<_> = (0..dim).map(|_| sampler.sample(&mut rng)).collect();
        let v: Vec<_> = (0..dim).map(|_| sampler.sample(&mut rng)).collect();
        
        let mut u_v = Vec::with_capacity(dim<<1);
        u_v.extend(&u);
        u_v.extend(&v);

        // root is the M-th root of unity
        let root = FF::try_minimal_primitive_root(M).unwrap();

        let mut fourier_matrix: Vec<_> = (0..(1 << dim) * (1 << dim)).map(|_| FF::ZERO).collect();
        let mut power_of_roots = Vec::with_capacity(M as usize);
    
        let mut power = FF::ONE;
        for _ in 0..M {
            power_of_roots.push(power);
            power *= root;
        }

        // In little endian, the index for F[i, j] is i + (j << dim)
        for i in 0..1<<dim {
            for j in 0..1<<dim {
                let idx_power = (2 * i + 1) * j % M;
                let idx_fourier = i + (j << dim);
                fourier_matrix[idx_fourier as usize] = power_of_roots[idx_power as usize];
            }
        }



        let fourier_mle = DenseMultilinearExtension::from_evaluations_vec(dim << 1, fourier_matrix);
        let partial_fourier_mle = init_fourier_table(&u, root);

        assert_eq!(fourier_mle.evaluate(&u_v), partial_fourier_mle.evaluate(&v));
    }

    #[test]
    fn test_w_power_x() {
        let dim = 10; // meaning x\in \{0, 1\}^{dim} and N = 1 << dim
        let logM = dim + 1;
        let M = 1 << logM; // M = 2N

        // root is the M-th root of unity
        let root = FF::try_minimal_primitive_root(M).unwrap();

        let mut ntt_table = Vec::with_capacity(M as usize);
    
        let mut power = FF::ONE;
        for _ in 0..M {
            ntt_table.push(power);
            power *= root;
        }

        let sampler = <FieldUniformSampler<FF>>::new();
        let mut rng = thread_rng();

        
        for x_dim in 0..=dim {
            let max_exp = logM - x_dim;
            for exp in 0..=max_exp {
                let r: Vec<_> = (0..x_dim).map(|_| sampler.sample(&mut rng)).collect();
                let w_mle = naive_w_power_times_x_table(&ntt_table, logM, x_dim, exp);
                let w_eval = eval_w_power_times_x(&ntt_table, logM, x_dim, exp, &r);
                assert_eq!(w_eval, w_mle.evaluate(&r));
            }
        }
    }
}