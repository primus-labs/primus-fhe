//! Interactive Proof Protocol used for Multilinear Sumcheck
// It is derived from https://github.com/arkworks-rs/sumcheck/blob/master/src/ml_sumcheck/protocol/mod.rs.

use algebra::{AbstractExtensionField, Field, ListOfProductsOfPolynomials, PolynomialInfo};
use prover::{ProverMsg, ProverState};
use std::marker::PhantomData;
use verifier::SubClaim;
pub mod prover;
pub mod verifier;
use algebra::utils::Transcript;

/// IP for MLSumcheck   
pub struct IPForMLSumcheck<F: Field, EF: AbstractExtensionField<F>> {
    _marker: PhantomData<F>,
    _stone: PhantomData<EF>,
}

/// Sumcheck for products of multilinear polynomial
pub struct MLSumcheck<F: Field, EF: AbstractExtensionField<F>> {
    _marker: PhantomData<F>,
    _stone: PhantomData<EF>,
}

/// proof generated by prover
pub type Proof<F, EF> = Vec<ProverMsg<F, EF>>;

impl<F: Field, EF: AbstractExtensionField<F>> MLSumcheck<F, EF> {
    /// Extract sum from the proof
    pub fn extract_sum(proof: &Proof<F, EF>) -> EF {
        proof[0].evaluations[0] + proof[0].evaluations[1]
    }

    /// Generate proof of the sum of polynomial over {0, 1}^`num_vars`
    ///
    /// The polynomial is represented by a list of products of polynomials along with its coefficient that is meant to be added together.
    ///
    /// This data structure of the polynomial is a list of list of `(coefficient, DenseMultilinearExtension)`.
    /// * Number of products n = `polynomial.products.len()`,
    /// * Number of multiplicands of ith product m_i = `polynomial.products[i].1.len()`,
    /// * Coefficient of ith product c_i = `polynomial.products[i].0`
    ///
    /// The resulting polynomial is
    ///
    /// $$\sum_{i=0}^{n}C_i\cdot\prod_{j=0}^{m_i}P_{ij}$$
    #[allow(clippy::type_complexity)]
    pub fn prove(
        trans: &mut Transcript<F>,
        polynomial: &ListOfProductsOfPolynomials<F, EF>,
    ) -> Result<(Proof<F, EF>, ProverState<F, EF>), crate::error::Error> {
        trans.append_message(b"polynomial info", &polynomial.info());

        let mut prover_state = IPForMLSumcheck::prover_init(polynomial);
        let mut verifier_msg = None;
        let mut prover_msgs = Vec::with_capacity(polynomial.num_variables);
        for _ in 0..polynomial.num_variables {
            let prover_msg = IPForMLSumcheck::prove_round(&mut prover_state, &verifier_msg);
            trans.append_message(b"sumcheck msg", &prover_msg);
            prover_msgs.push(prover_msg);

            verifier_msg = Some(IPForMLSumcheck::sample_round(trans));
        }
        prover_state
            .randomness
            .push(verifier_msg.unwrap().randomness);
        Ok((prover_msgs, prover_state))
    }

    /// verify the proof using `polynomial_info` as the verifier key
    pub fn verify(
        trans: &mut Transcript<F>,
        polynomial_info: &PolynomialInfo,
        claimed_sum: EF,
        proof: &Proof<F, EF>,
    ) -> Result<SubClaim<F, EF>, crate::Error> {
        // let mut trans = Transcript::<F>::new();
        trans.append_message(b"polynomial info", polynomial_info);

        let mut verifier_state = IPForMLSumcheck::verifier_init(polynomial_info);
        for i in 0..polynomial_info.num_variables {
            let prover_msg = proof.get(i).expect("proof is incomplete");
            trans.append_message(b"sumcheck msg", prover_msg);

            IPForMLSumcheck::verify_round((*prover_msg).clone(), &mut verifier_state, trans);
        }

        IPForMLSumcheck::check_and_generate_subclaim(verifier_state, claimed_sum)
    }
}
